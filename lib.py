import numpy as np
import uncertainties as un
from uncertainties import unumpy as unp
from pprint import pp


def fuckinglayout(plt):
    plt.tight_layout(pad=0, h_pad=1.08, w_pad=1.08)


def plotdefaults(plt, ax):
    ax.legend()
    plt.grid(True)
    fuckinglayout(plt)


TEX_CONSTANTS = r"""% autogenerated by plot.py - do not edit
{}
"""


def new_command_tex_float(key, value):
    key = key[0].upper() + key[1:]
    appendix = ""
    if type(value) == str:
        return r"\newcommand{{\py{}}}{{{}}}".format(key, value)
    if unp.log10(np.abs(value)) < -3:
        appendix = r"\cdot 10^{-3}"
        value *= 10**3
    try:
        err = "{:f}".format(value).split("+/-")
        return (
            r"\newcommand{{\py{}}}{{{:f}{}}}".format(key, value.n, appendix)
            + "\n"
            + r"\newcommand{{\py{}Un}}{{({} \pm{{}} {}){}}}".format(
                key, err[0], err[1], appendix
            )
        )
    except AttributeError:
        # there is not uncertainty attached
        return r"\newcommand{{\py{}}}{{{}{}}}".format(key, value, appendix)


def format_tex_float(value):
    if value is None:
        return ""
    try:
        err = "{:f}".format(value).split("+/-")
        return r"{} \pm{{}} {}".format(err[0], err[1])
    except IndexError:
        return str(value)


def makeconstants(tex):
    with open("constants.tex", "w") as fd:
        __makeconstants(tex, fd)


def __makeconstants(tex, fd):
    pp(tex)
    cs = []
    for key, value in tex.items():
        cs.append(new_command_tex_float(key, value))
    fmt = "\n".join(cs)
    fd.write(TEX_CONSTANTS.format(fmt))


TABLE_TEMPLATE = """\
% usage: \\makeTable{tex}{{<ref>}}
\\newcommand{{\\makeTable{tex}}}[1]{{
\\tableAny{{{name}}}{{{layout}}}{{#1}}{{
{content}
}}
}}
"""
# each entry must be a dict with following keys
#    {
#        "tex": "MacroName",
#        "name": r"Messreihe $T_1$ mit $p_1 < 1\Unit{bar}$",
#        "rowdescription": [r"$T_1 [\degC]$", r"$p_1 [\Unit{mbar}]$"],
#        "content": [ ... ]
#    }
tex_tables = []


def maketables():
    tables = []
    for table in tex_tables:

        def entry_to_str(entry):
            try:
                return [format_tex_float(i) for i in entry]
            except TypeError:
                return [format_tex_float(entry)]

        tabcopy = dict(table)
        try:
            length = len(table["content"][0])
        except TypeError:
            length = 1
        tabcopy["layout"] = "|" + "|".join(["r"] * length) + "|"
        tabcopy["content"] = (
            r"\headerAny{{{}}}".format("&".join(table["rowdescription"])) + "\n"
        )
        tabcopy["content"] += "\n".join(
            [
                r"\entryAny{" + ("&").join(entry_to_str(entry)) + r"}"
                for entry in table["content"]
            ]
        )
        tables.append(TABLE_TEMPLATE.format(**tabcopy))
    with open("data-tables.tex", "w") as fd:
        fd.write("% autogenerated by plot.py - do not edit\n" + "\n".join(tables))


def mean(ar):
    "calculate the mean of an un.ufloat array"
    return un.ufloat(np.mean(ar).n, np.std([i.n for i in ar]))
